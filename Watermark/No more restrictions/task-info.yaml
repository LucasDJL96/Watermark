type: edu
files:
- name: src/watermark/Main.kt
  visible: true
  text: |-
    package watermark

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/WatermarkTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO
    import kotlin.math.abs

    class CardGameTest : StageTest<Any>() {

        @DynamicTest(order = 1)
        fun imageNotExistTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Incorrect output, when a non existing filename was input.")

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun imageColorCompLess3Test5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}grey.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of image color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun imageBitsPerPixelTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}bits16.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The image isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun watermarkNotExistTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}image5.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a non existing watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun watermarkColorCompLess3Test5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}grey.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of watermark color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun watermarkBitsPerPixelTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}bits16.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun wideWatermarkTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}wide.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}wide.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark's dimensions are larger.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the watermark image is wider than the original image."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun tallWatermarkTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}tall.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}tall.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark's dimensions are larger.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the watermark image is taller than the original image."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 9)
        fun invalidPositionMethodTest5(): CheckResult {
            val posMethodInputs = listOf("pos", "0 0", "top")
            for (posMethodInput in posMethodInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute(posMethodInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position method input is invalid.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 10)
        fun invalidPositionTest5(): CheckResult {
            val posInputs = listOf("top", "up right", "100-100")
            for (posInput in posInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute("single").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                outputString = main.execute(posInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position input is invalid.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong position input."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 11)
        fun outOfRangeTest5(): CheckResult {
            val posInputs = listOf("-1 300", "301 600", "0 -1", "0 601")
            for (posInput in posInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute("single").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                outputString = main.execute(posInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position input is out of range.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after input out of range position."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 12)
        fun gridPositionUsingTransparencyTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out1.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgb.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("0 0 0").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after a transparent color input."
            )

            outputString = main.execute("15").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("grid").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("test${File.separator}out1.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out1.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out1.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileTransparencyColorGridS5(15, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgb.png", "test${File.separator}out1.png", Color(0, 0, 0)))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 13)
        fun gridPositionAlphaChannelTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out2.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgba.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgba.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("25").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("grid").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("test${File.separator}out2.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out2.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out2.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileAlphaChannelGridS5(25, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgba.png", "test${File.separator}out2.png"))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 14)
        fun singlePositionUsingTransparencyTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out3.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgb.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("0 0 0").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after a transparent color input."
            )

            outputString = main.execute("35").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("single").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("200 200").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position input."
            )

            outputString = main.execute("test${File.separator}out3.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out3.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out3.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileTransparencyColorSingleS5(35, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgb.png", "test${File.separator}out3.png", Color(0, 0, 0),
                    200, 200))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 15)
        fun singlePositionAlphaChannelTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out4.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgba.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgba.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("50").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("single").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("300 400").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position input."
            )

            outputString = main.execute("test${File.separator}out4.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out4.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out4.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileAlphaChannelSingleS5(50, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgba.png", "test${File.separator}out4.png", 300, 400))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkIfCorrectOutputFileAlphaChannelSingleS5(per: Int, err: Long, imageStr: String, watStr: String,
                                                     outStr: String, posX: Int, posY: Int): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val wat = ImageIO.read(watermarkFile)
        val watermark = BufferedImage(image.width, image.height, BufferedImage.TYPE_INT_ARGB)
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val color = if (x in posX until (posX + wat.width) && y in posY until (posY + wat.height))
                    Color(wat.getRGB(x - posX, y - posY), true)
                else Color(0, 0, 0, 0)
                watermark.setRGB(x, y, color.rgb)
            }
        }
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y), true)
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.alpha == 0) {
                    Color(i.red, i.green, i.blue)}
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileTransparencyColorSingleS5(per: Int, err: Long, imageStr: String, watStr: String,
                                                          outStr: String, trColor: Color, posX: Int, posY: Int): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val wat = ImageIO.read(watermarkFile)
        val watermark = BufferedImage(image.width, image.height, BufferedImage.TYPE_INT_RGB)
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val color = if (x in posX until (posX + wat.width) && y in posY until (posY + wat.height))
                    Color(wat.getRGB(x - posX, y - posY))
                else trColor
                watermark.setRGB(x, y, color.rgb)
            }
        }
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.red == trColor.red && w.green == trColor.green && w.blue == trColor.blue)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileAlphaChannelGridS5(per: Int, err: Long,
                                                   imageStr: String, watStr: String, outStr: String): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x % watermark.width, y % watermark.height), true)
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.alpha == 0)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileTransparencyColorGridS5(per: Int, err: Long,
                                                        imageStr: String, watStr: String, outStr: String, trColor: Color): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x % watermark.width, y % watermark.height))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.red == trColor.red && w.green == trColor.green && w.blue == trColor.blue)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }


  learner_created: false
- name: test/70x50.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAEYAAAAyCAIAAABu/zoEAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr8+pKKVInYQcchQnSyILxylikWwUNoKrTqYXPqCJg1Jiouj4Fpw8LFYdXBx1tXBVRAEHyBubk6KLlLi/5JCixgPjvvx3X0fd98B3kaFKYZ/HFBUU0/FY0I2tyoEXtELP/oxjZDIDC2RXszAdXzdw8PXuyjPcj/35+iT8wYDPALxHNN0k3iDeGbT1DjvE4dZSZSJz4nHdLog8SPXJYffOBdt9vLMsJ5JzROHiYViB0sdzEq6QjxFHJEVlfK9WYdlzluclUqNte7JXxjMqytprtMcRhxLSCAJARJqKKMCE1FaVVIMpGg/5uIfsv1JcknkKoORYwFVKBBtP/gf/O7WKExOOEnBGND1YlkfI0BgF2jWLev72LKaJ4DvGbhS2/5qA5j9JL3e1iJHQGgbuLhua9IecLkDDD5poi7ako+mt1AA3s/om3LAwC3Qs+b01trH6QOQoa6Wb4CDQ2C0SNnrLu/u7uzt3zOt/n4Ahqlyr9cYpmcAAAAJcEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQflCwQROTKpWJOqAAAAGXRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QV4EOFwAAACBJREFUaN7twQEBAAAAgiD/r25IQAEAAAAAAAAAAAA8GCk2AAEkmiECAAAAAElFTkSuQmCC
  learner_created: false
- name: test/bits16.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAGUAAAAzEAIAAABRWY0xAAABhmlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AYht+milIqCnYQ6ZChCoIFURFHqWIRLJS2QqsOJpf+QZOGJMXFUXAtOPizWHVwcdbVwVUQBH9A3NycFF2kxO+SQosYD+7u4b3vfbn7DhAaFaaaXROAqllGKh4Ts7lVsecVAYQxQOuYxEw9kV7MwHN83cPH97soz/Ku+3P0KXmTAT6ReI7phkW8QTyzaemc94lDrCQpxOfE4wZdkPiR67LLb5yLDgs8M2RkUvPEIWKx2MFyB7OSoRJPE0cUVaN8IeuywnmLs1qpsdY9+QuDeW0lzXWaYcSxhASSECGjhjIqsBClXSPFRIrOYx7+YcefJJdMrjIYORZQhQrJ8YP/we/emoWpSTcpGAO6X2z7YwTo2QWaddv+Prbt5gngfwautLa/2gBmP0mvt7XIEdC/DVxctzV5D7jcAYaedMmQHMlPUygUgPcz+qYcMHgLBNbcvrXOcfoAZKhXyzfAwSEwWqTsdY9393b27d+aVv9+AJNIcrQDNf7qAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH5QodCi8lNhHejgAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAB2SURBVHja7dJBDQAgDMBAwL/nomKPJXcSmt6qOjDgSYC9sBfYC3thL7AX9sJeYC/shb3AXtgLe4G9sBf2AnthL7AX9sJeYC/shb3AXtgLe4G9sBf2AnthL+wF9sJeYC/shb3AXtgLe4G9sBf2AnthL+wF9mKBD19wBmDjgDPbAAAAAElFTkSuQmCC
  learner_created: false
- name: test/grey.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAGUAAAAzCAAAAACrwJn5AAAACXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH5QodCiwSpYEoQgAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAAuSURBVFjD7c0xEQAACASg1/6dtYWDBwWoyYGOxWKxWCwWi8VisVgsFovFYvmwLF6/AWVrlkPmAAAAAElFTkSuQmCC
  learner_created: false
- name: out.gif
  visible: true
  text: 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
  learner_created: true
- name: test/logorgba.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAMgAAABkCAYAAADDhn8LAAAB/ElEQVR42u3bQXLDIAwF0NygR+n9L9Zte4GmNQYhCb83000nwY7MN5iQ1wsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI7w8fX5/e4vs61q9dBTBERABISoTn1CON59Dr1EQKY694o2BIR24XhaQEyvWB6QVSETEI4LyN33rx6tOk2vrtTs7nGvtjlzvMjzbxmQ0U5+tVBPC8jVekUskuyaKRwVkr8+1GhA7owKqy5Sh+lVZMddEY4VM4XjQjIyBP/33qyAdHj+mK3Jnc6b9fqjQnI3ICPz2pUBiS58djhWdchO7bcNyG9TqJH/77gz7a7HrvaiFzpm2q+y0FEuIFeeTQQkPyCd2m8djpElw5V3s2pLrxntRXbg7svwbQKyc7jfUewqo8fstckePQRk4LUR0zwBqT29elRAKsxXdxW68vNHp4Acscw783C8c76aGQ4P6J4/SgdkZ6GfEpDu24BKBmRHe9nbFU75gjB7Wf0x339UC0hGPWb3G2XsKlgZqF0bT48PR/eArAjH7G5nGxQfNnp0+i17xU6269yjjvHqrNr0KntpMDogI8eIOP+o7zUe9QMpAYm/E584tcbFO7bGKtI4HC6gGxAunvri4lV7blI9UysBUVujh9oJhnAAAAAAAAAAAAAAAAAAAAAAAAAAAMDRfgCYWI3EhMnRFwAAAABJRU5ErkJggg==
  learner_created: false
- name: test/tall.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAAUAAAMgCAIAAABkhD+qAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9btX5UHewg4pCh6mJBVMRRqlgEC6Wt0KqDyaVf0KQhSXFxFFwLDn4sVh1cnHV1cBUEwQ8QNzcnRRcp8X9JoUWMB8f9eHfvcfcO8NZKTDHaJgBFNfVENCKkM6uC/xU96EAfxtAlMkOLJRdTcB1f9/Dw9S7Ms9zP/Tl65azBAI9APMc03STeIJ7ZNDXO+8RBVhBl4nPicZ0uSPzIdcnhN855m708M6inEvPEQWIh38JSC7OCrhBPE4dkRaV8b9phmfMWZ6VUYY178hcGsupKkus0hxHFEmKIQ4CECooowUSYVpUUAwnaj7j4h2x/nFwSuYpg5FhAGQpE2w/+B7+7NXJTk05SIAK0v1jWxwjg3wXqVcv6Pras+gngewau1Ka/XANmP0mvNrXQEdC/DVxcNzVpD7jcAQafNFEXbclH05vLAe9n9E0ZYOAW6F5zemvs4/QBSFFXyzfAwSEwmqfsdZd3d7b29u+ZRn8/Ukxymmw61yYAAAAJcEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQflCwYOLATsJMzhAAAAGXRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QV4EOFwAAACNJREFUaN7twTEBAAAAwqD1T20ND6AAAAAAAAAAAAAAAAB4NjIAAAE2cc8yAAAAAElFTkSuQmCC
  learner_created: false
- name: test/wide.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAlgAAAAFCAIAAAAWiwWLAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9btX5UHewg4pCh6mJBVMRRqlgEC6Wt0KqDyaVf0KQhSXFxFFwLDn4sVh1cnHV1cBUEwQ8QNzcnRRcp8X9JoUWMB8f9eHfvcfcO8NZKTDHaJgBFNfVENCKkM6uC/xU96EAfxtAlMkOLJRdTcB1f9/Dw9S7Ms9zP/Tl65azBAI9APMc03STeIJ7ZNDXO+8RBVhBl4nPicZ0uSPzIdcnhN855m708M6inEvPEQWIh38JSC7OCrhBPE4dkRaV8b9phmfMWZ6VUYY178hcGsupKkus0hxHFEmKIQ4CECooowUSYVpUUAwnaj7j4h2x/nFwSuYpg5FhAGQpE2w/+B7+7NXJTk05SIAK0v1jWxwjg3wXqVcv6Pras+gngewau1Ka/XANmP0mvNrXQEdC/DVxcNzVpD7jcAQafNFEXbclH05vLAe9n9E0ZYOAW6F5zemvs4/QBSFFXyzfAwSEwmqfsdZd3d7b29u+ZRn8/Ukxymmw61yYAAAAJcEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQflCwYOKASISAnlAAAAGXRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QV4EOFwAAAB9JREFUaN7twQEBAAAAgiD/r25IQAEAAAAAAAAAwIkBIy0AAVPDBOcAAAAASUVORK5CYII=
  learner_created: false
- name: test/image5.png
  visible: false
  learner_created: false
- name: test/logorgb.png
  visible: false
  text: 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
  learner_created: false
- name: src/watermark/ImageBlender.kt
  visible: true
  learner_created: true
- name: test/out4.png
  visible: true
  learner_created: true
- name: test/out1.png
  visible: true
  learner_created: true
- name: test/out3.png
  visible: true
  learner_created: true
- name: test/out2.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/17149#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 07 Jun 2022 19:58:28 UTC
record: -1
